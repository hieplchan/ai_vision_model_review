

================= Micronet Deep Learning Vision =================
Version: 0.2
Author: Luong Chan Hiep
Company: ARI Technology
Email: hiep.lchan@gmail.com
=================================================================




========================== Pytorch Info =========================
Working on GPU
CUDA devices count: 1
CUDA devices name: GeForce GTX 1080
=================================================================


Origin Width: 529, Height: 961
Scale Factor: 1.0, Output Stride: 16
Targer Width: 529, Height: 961



Checkpoint to load: /home/hiep/pytorch-vision/utils/../models/_models/pytorch/mobilenetv1_101_features.pth

========================= MODEL SUMMARY =========================
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1         [-1, 32, 265, 481]             896
         InputConv-2         [-1, 32, 265, 481]               0
            Conv2d-3         [-1, 32, 265, 481]             320
            Conv2d-4         [-1, 64, 265, 481]           2,112
     SeperableConv-5         [-1, 64, 265, 481]               0
            Conv2d-6         [-1, 64, 133, 241]             640
            Conv2d-7        [-1, 128, 133, 241]           8,320
     SeperableConv-8        [-1, 128, 133, 241]               0
            Conv2d-9        [-1, 128, 133, 241]           1,280
           Conv2d-10        [-1, 128, 133, 241]          16,512
    SeperableConv-11        [-1, 128, 133, 241]               0
           Conv2d-12         [-1, 128, 67, 121]           1,280
           Conv2d-13         [-1, 256, 67, 121]          33,024
    SeperableConv-14         [-1, 256, 67, 121]               0
           Conv2d-15         [-1, 256, 67, 121]           2,560
           Conv2d-16         [-1, 256, 67, 121]          65,792
    SeperableConv-17         [-1, 256, 67, 121]               0
           Conv2d-18          [-1, 256, 34, 61]           2,560
           Conv2d-19          [-1, 512, 34, 61]         131,584
    SeperableConv-20          [-1, 512, 34, 61]               0
           Conv2d-21          [-1, 512, 34, 61]           5,120
           Conv2d-22          [-1, 512, 34, 61]         262,656
    SeperableConv-23          [-1, 512, 34, 61]               0
           Conv2d-24          [-1, 512, 34, 61]           5,120
           Conv2d-25          [-1, 512, 34, 61]         262,656
    SeperableConv-26          [-1, 512, 34, 61]               0
           Conv2d-27          [-1, 512, 34, 61]           5,120
           Conv2d-28          [-1, 512, 34, 61]         262,656
    SeperableConv-29          [-1, 512, 34, 61]               0
           Conv2d-30          [-1, 512, 34, 61]           5,120
           Conv2d-31          [-1, 512, 34, 61]         262,656
    SeperableConv-32          [-1, 512, 34, 61]               0
           Conv2d-33          [-1, 512, 34, 61]           5,120
           Conv2d-34          [-1, 512, 34, 61]         262,656
    SeperableConv-35          [-1, 512, 34, 61]               0
           Conv2d-36           [-1, 12, 34, 61]          55,308
           Conv2d-37           [-1, 24, 34, 61]         110,616
           Conv2d-38          [-1, 512, 34, 61]           5,120
           Conv2d-39         [-1, 1024, 34, 61]         525,312
    SeperableConv-40         [-1, 1024, 34, 61]               0
           Conv2d-41         [-1, 1024, 34, 61]          10,240
           Conv2d-42         [-1, 1024, 34, 61]       1,049,600
    SeperableConv-43         [-1, 1024, 34, 61]               0
           Conv2d-44           [-1, 12, 34, 61]         110,604
           Conv2d-45           [-1, 24, 34, 61]         221,208
           Conv2d-46          [-1, 256, 34, 61]         262,400
             ReLU-47          [-1, 256, 34, 61]               0
           Conv2d-48          [-1, 512, 17, 31]       1,180,160
             ReLU-49          [-1, 512, 17, 31]               0
           Conv2d-50           [-1, 12, 17, 31]          55,308
           Conv2d-51           [-1, 24, 17, 31]         110,616
           Conv2d-52          [-1, 128, 17, 31]          65,664
             ReLU-53          [-1, 128, 17, 31]               0
           Conv2d-54           [-1, 256, 9, 16]         295,168
             ReLU-55           [-1, 256, 9, 16]               0
           Conv2d-56            [-1, 12, 9, 16]          27,660
           Conv2d-57            [-1, 24, 9, 16]          55,320
           Conv2d-58           [-1, 128, 9, 16]          32,896
             ReLU-59           [-1, 128, 9, 16]               0
           Conv2d-60            [-1, 256, 5, 8]         295,168
             ReLU-61            [-1, 256, 5, 8]               0
           Conv2d-62             [-1, 12, 5, 8]          27,660
           Conv2d-63             [-1, 24, 5, 8]          55,320
           Conv2d-64            [-1, 128, 5, 8]          32,896
             ReLU-65            [-1, 128, 5, 8]               0
           Conv2d-66            [-1, 256, 3, 4]         295,168
             ReLU-67            [-1, 256, 3, 4]               0
           Conv2d-68             [-1, 12, 3, 4]          27,660
           Conv2d-69             [-1, 24, 3, 4]          55,320
================================================================
Total params: 6,568,152
Trainable params: 6,568,152
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 5.82
Forward/backward pass size (MB): 723.69
Params size (MB): 25.06
Estimated Total Size (MB): 754.56
----------------------------------------------------------------



========================= MODEL REPORT ==========================
SSD(
  10.869 GMac, 100.000% MACs, 
  (base_net): Sequential(
    8.467 GMac, 77.904% MACs, 
    (conv0): InputConv(
      0.114 GMac, 1.051% MACs, 
      (conv): Conv2d(0.114 GMac, 1.051% MACs, 3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    )
    (conv1): SeperableConv(
      0.31 GMac, 2.852% MACs, 
      (depthwise): Conv2d(0.041 GMac, 0.375% MACs, 32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
      (pointwise): Conv2d(0.269 GMac, 2.477% MACs, 32, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv2): SeperableConv(
      0.287 GMac, 2.642% MACs, 
      (depthwise): Conv2d(0.021 GMac, 0.189% MACs, 64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64)
      (pointwise): Conv2d(0.267 GMac, 2.454% MACs, 64, 128, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv3): SeperableConv(
      0.57 GMac, 5.247% MACs, 
      (depthwise): Conv2d(0.041 GMac, 0.377% MACs, 128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
      (pointwise): Conv2d(0.529 GMac, 4.870% MACs, 128, 128, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv4): SeperableConv(
      0.278 GMac, 2.559% MACs, 
      (depthwise): Conv2d(0.01 GMac, 0.095% MACs, 128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=128)
      (pointwise): Conv2d(0.268 GMac, 2.463% MACs, 128, 256, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv5): SeperableConv(
      0.554 GMac, 5.098% MACs, 
      (depthwise): Conv2d(0.021 GMac, 0.191% MACs, 256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
      (pointwise): Conv2d(0.533 GMac, 4.907% MACs, 256, 256, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv6): SeperableConv(
      0.278 GMac, 2.560% MACs, 
      (depthwise): Conv2d(0.005 GMac, 0.049% MACs, 256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)
      (pointwise): Conv2d(0.273 GMac, 2.511% MACs, 256, 512, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv7): SeperableConv(
      0.555 GMac, 5.110% MACs, 
      (depthwise): Conv2d(0.011 GMac, 0.098% MACs, 512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
      (pointwise): Conv2d(0.545 GMac, 5.012% MACs, 512, 512, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv8): SeperableConv(
      0.555 GMac, 5.110% MACs, 
      (depthwise): Conv2d(0.011 GMac, 0.098% MACs, 512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
      (pointwise): Conv2d(0.545 GMac, 5.012% MACs, 512, 512, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv9): SeperableConv(
      0.555 GMac, 5.110% MACs, 
      (depthwise): Conv2d(0.011 GMac, 0.098% MACs, 512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
      (pointwise): Conv2d(0.545 GMac, 5.012% MACs, 512, 512, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv10): SeperableConv(
      0.555 GMac, 5.110% MACs, 
      (depthwise): Conv2d(0.011 GMac, 0.098% MACs, 512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
      (pointwise): Conv2d(0.545 GMac, 5.012% MACs, 512, 512, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv11): SeperableConv(
      0.555 GMac, 5.110% MACs, 
      (depthwise): Conv2d(0.011 GMac, 0.098% MACs, 512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
      (pointwise): Conv2d(0.545 GMac, 5.012% MACs, 512, 512, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv12): SeperableConv(
      1.1 GMac, 10.122% MACs, 
      (depthwise): Conv2d(0.011 GMac, 0.098% MACs, 512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
      (pointwise): Conv2d(1.089 GMac, 10.024% MACs, 512, 1024, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv13): SeperableConv(
      2.198 GMac, 20.224% MACs, 
      (depthwise): Conv2d(0.021 GMac, 0.195% MACs, 1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=1024)
      (pointwise): Conv2d(2.177 GMac, 20.029% MACs, 1024, 1024, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (extras): ModuleList(
    1.266 GMac, 11.644% MACs, 
    (0): Sequential(
      1.167 GMac, 10.737% MACs, 
      (0): Conv2d(0.544 GMac, 5.007% MACs, 1024, 256, kernel_size=(1, 1), stride=(1, 1))
      (1): ReLU(0.001 GMac, 0.005% MACs, )
      (2): Conv2d(0.622 GMac, 5.722% MACs, 256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (3): ReLU(0.0 GMac, 0.002% MACs, )
    )
    (1): Sequential(
      0.077 GMac, 0.710% MACs, 
      (0): Conv2d(0.035 GMac, 0.318% MACs, 512, 128, kernel_size=(1, 1), stride=(1, 1))
      (1): ReLU(0.0 GMac, 0.001% MACs, )
      (2): Conv2d(0.043 GMac, 0.391% MACs, 128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (3): ReLU(0.0 GMac, 0.000% MACs, )
    )
    (2): Sequential(
      0.017 GMac, 0.152% MACs, 
      (0): Conv2d(0.005 GMac, 0.044% MACs, 256, 128, kernel_size=(1, 1), stride=(1, 1))
      (1): ReLU(0.0 GMac, 0.000% MACs, )
      (2): Conv2d(0.012 GMac, 0.109% MACs, 128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (3): ReLU(0.0 GMac, 0.000% MACs, )
    )
    (3): Sequential(
      0.005 GMac, 0.045% MACs, 
      (0): Conv2d(0.001 GMac, 0.012% MACs, 256, 128, kernel_size=(1, 1), stride=(1, 1))
      (1): ReLU(0.0 GMac, 0.000% MACs, )
      (2): Conv2d(0.004 GMac, 0.033% MACs, 128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (3): ReLU(0.0 GMac, 0.000% MACs, )
    )
  )
  (classification_headers): ModuleList(
    0.379 GMac, 3.484% MACs, 
    (0): Conv2d(0.115 GMac, 1.055% MACs, 512, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): Conv2d(0.229 GMac, 2.111% MACs, 1024, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (2): Conv2d(0.029 GMac, 0.268% MACs, 512, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): Conv2d(0.004 GMac, 0.037% MACs, 256, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (4): Conv2d(0.001 GMac, 0.010% MACs, 256, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (5): Conv2d(0.0 GMac, 0.003% MACs, 256, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (regression_headers): ModuleList(
    0.757 GMac, 6.968% MACs, 
    (0): Conv2d(0.229 GMac, 2.111% MACs, 512, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): Conv2d(0.459 GMac, 4.221% MACs, 1024, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (2): Conv2d(0.058 GMac, 0.536% MACs, 512, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): Conv2d(0.008 GMac, 0.073% MACs, 256, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (4): Conv2d(0.002 GMac, 0.020% MACs, 256, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (5): Conv2d(0.001 GMac, 0.006% MACs, 256, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
Flops:  10868.82 MMac
Params: 6.57 M
SSD input shape: torch.Size([1, 3, 961, 529])
Basenet output shape: torch.Size([1, 1024, 61, 34])
Output of extras layer size: 
Layer idx:  0, Size: torch.Size([1, 512, 31, 17])
Layer idx:  1, Size: torch.Size([1, 256, 16, 9])
Layer idx:  2, Size: torch.Size([1, 256, 8, 5])
Layer idx:  3, Size: torch.Size([1, 256, 4, 3])


Regression: torch.Size([1, 29226, 4]), Classification: torch.Size([1, 29226, 2]), Priors: 29226 boxes
